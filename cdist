#!/usr/bin/python

import os
import sys
import shutil
import glob
import tempfile
import argparse

#
# Utility bits
# 

def log(m):
    print '* %s' % m

def error(e):
    print 'Error: %s' % e
    sys.exit(1)

def copytree(a, b):
    log('copy %s -> %s' % (a, b))
    shutil.copytree(a, b)

def rmtree(a):
    log('remove %s' % a)
    shutil.rmtree(a, ignore_errors=True)


#
# Version
#

class Version:
    def __init__(self, s):
        self.pre = False
        self.beta = None

        if s.startswith("'"):
            s = s[1:]
        if s.endswith("'"):
            s = s[0:-1]
        
        if s.endswith('pre'):
            s = s[0:-3]
            self.pre = True

        b = s.find("beta")
        if b != -1:
            self.beta = int(s[b+4:])
            s = s[0:b]

        p = s.split('.')
        self.major = int(p[0])
        self.minor = int(p[1])

    def bump(self):
        self.minor += 1
        self.pre = False
        self.beta = None

    def to_pre(self):
        self.pre = True
        self.beta = None

    def bump_and_to_pre(self):
        self.bump()
        self.pre = True
        self.beta = None

    def to_release(self):
        self.pre = False
        self.beta = None

    def bump_beta(self):
        if self.pre:
            self.pre = False
            self.beta = 1
        elif self.beta is not None:
            self.beta += 1
        elif self.beta is None:
            self.beta = 1

    def __str__(self):
        s = '%d.%02d' % (self.major, self.minor)
        if self.beta is not None:
            s += 'beta%d' % self.beta
        elif self.pre:
            s += 'pre'

        return s


#
# Environment
#

class Environment(object):
    def __init__(self):
        self.variables = {}

    def set(self, a, b):
        self.variables[a] = b

    def get(self, a):
        return self.variables[a]

    def variables_string(self):
        e = ''
        for k, v in self.variables.iteritems():
            e += '%s="%s" ' % (k, v)
        return e

    def work_dir(self, sub):
        assert(false)
        
    def checkout(self, project):
        os.command('git clone %s/%s.git %s/src/%s' % (project.git_dir, project.name, self.work_dir(), project.name))
        os.chdir(self.work_dir())

    def build_dependencies(self, target, project):
        if 'dependencies' in project.cscript:
            for d in project.cscript['dependencies'](target):
                self.build(target, Project(d))

    def build(self, target, project):
        self.checkout(project)
        project.cscript['build'](self, target)

    def package(self, target, project):
        self.build_dependencies(target, project)
        self.checkout(project)
        self.build(target, project)
        project.cscript['package'](self, target, project.version)


#
# ChrootEnvironment
#

class ChrootEnvironment(Environment):
    def __init__(self, chroot):
        super(ChrootEnvironment, self).__init__()
        self.chroot = chroot
        self.dir_in_chroot = '/home/carl'
        self.chroot_dir = '/home/carl/Environments'

        # ChrootEnvironments work in dir_in_chroot, and clear
        # it out before use
        for g in glob.glob('%s/*' % self.work_dir(False)):
            rmtree(g)

        # Environment variables
        self.set('CXXFLAGS', '-I%s/include' % self.work_dir(True))
        self.set('LINKFLAGS', '-L%s/lib' % self.work_dir(True))
        self.set('PKG_CONFIG_PATH', '%s/lib/pkgconfig' % self.work_dir(True))

    def work_dir(self, sub = False):
        if sub:
            return self.dir_in_chroot
        else:
            return '%s/%s%s' % (self.chroot_dir, self.chroot, self.dir_in_chroot)

    def command(self, c):
        log('schroot -> %s' % c)

        # Work out the cwd for the chrooted command
        cwd = os.getcwd()
        prefix = '%s/%s' % (self.chroot_dir, self.chroot)
        assert(cwd.startswith(prefix))
        cwd = cwd[len(prefix)+1:]

        os.system('%s schroot -c %s -d %s -p -- %s' % (self.variables_string(), self.chroot, cwd, c))


#
# HostEnvironment
#

class HostEnvironment(Environment):
    def __init__(self):
        super(HostEnvironment, self).__init__()
        self.temp = tempfile.mkdtemp()

    def work_dir(self, sub = False):
        return self.temp

    def command(self, c):
        log('host -> %s' % c)
        os.system('%s %s' % (self.variables_string(), c))

    def cleanup(self):
        rmtree(self.temp)


#
# WindowsEnvironment
#

class WindowsEnvironment(HostEnvironment):
    def __init__(self, bits):
        super(WindowsEnvironment, self).__init__()

        self._windows_prefix = '/home/carl/Environments/windows/%d' % bits
        if bits == 32:
            self.mingw_name = 'i686'
        else:
            self.mingw_name = 'x86_64'

        self.mingw_path = '/mingw/bin'
        self.mingw_prefix = '/mingw/%s-w64-mingw32' % self.mingw_name

        self.set('PKG_CONFIG_LIBDIR', '%s/lib/pkgconfig' % self._windows_prefix)
        self.set('PKG_CONFIG_PATH', '%s/lib/pkgconfig' % self.work_dir(True))
        self.set('PATH', '%s/bin:%s:%s' % (self._windows_prefix, self.mingw_path, os.environ['PATH']))
        self.set('CC', '%s-w64-mingw32-gcc' % self.mingw_name)
        self.set('CXX', '%s-w64-mingw32-g++' % self.mingw_name)
        self.set('LD', '%s-w64-mingw32-ld' % self.mingw_name)
        self.set('RANLIB', '%s-w64-mingw32-ranlib' % self.mingw_name)
        self.set('WINRC', '%s-w64-mingw32-windres' % self.mingw_name)
        self.set('CXXFLAGS', '-I%s/include -I%s/include -I%s/include' % (self._windows_prefix, self.mingw_prefix, self.work_dir(True)))
        self.set('LINKFLAGS', '-L%s/lib -L%s/lib -L%s/lib' % (self._windows_prefix, self.mingw_prefix, self.work_dir(True)))

    def windows_prefix(self):
        return self._windows_prefix


#
# Target
#

class Target:
    def __init__(self, name):
        if name.startswith('ubuntu-'):
            self.platform = 'linux'
            self.version = name.split('-')[1]
            self.bits = int(name.split('-')[2])
            self.environment = ChrootEnvironment(name)
        elif name.startswith('windows-'):
            self.platform = 'windows'
            self.bits = int(name.split('-')[1])
            self.environment = WindowsEnvironment(self.bits)
            if self.bits == 32:
                self.host = 'i686-w64-mingw32'
            else:
                self.hots = 'x86_64-w64-mingw32'

#
# Project
#
 
class Project(object):
    def __init__(self, name, specifier=None):
        self.name = name
        self.git_dir = '/home/carl/git'
        self.version = None
        self.specifier = specifier

        tmp = tempfile.mkdtemp()
        os.system('git --git-dir=%s/%s.git show %s:cscript > %s/cscript' % (self.git_dir, self.name, self.specifier, tmp))
        os.system('git --git-dir=%s/%s.git show %s:wscript > %s/wscript' % (self.git_dir, self.name, self.specifier, tmp))

        self.cscript = {}
        execfile('%s/cscript' % tmp, self.cscript)

        if os.path.exists('%s/wscript' % tmp):
            f = open('%s/wscript' % tmp, 'r')
            version = None
            while 1:
                l = f.readline()
                if l == '':
                    break

                s = l.split()
                if len(s) == 3 and s[0] == "VERSION":
                    self.version = Version(s[2])

            f.close()

        rmtree(tmp)


#
# Command-line parser
#

parser = argparse.ArgumentParser()
parser.add_argument('command')
parser.add_argument('-p', '--project', help='project name', required=True)
parser.add_argument('--beta', help='beta release', action='store_true')
parser.add_argument('--full', help='full release', action='store_true')
parser.add_argument('-c', '--checkout', help='string to pass to git for checkout')
parser.add_argument('-o', '--output', help='output directory', default='.')
parser.add_argument('-q', '--quiet', help='be quiet', action='store_true')
parser.add_argument('-t', '--target', help='target')
args = parser.parse_args()

if args.command == 'build':
    if args.project is None:
        error('you must specify -p or --project')
    if args.target is None:
        error('you must specify -t or --target')

    project = Project(args.project)
    target = Target(args.target)
    target.environment.build_dependencies(target, project)
    target.environment.build(target, project)

elif args.command == 'package':
    if args.project is None:
        error('you must specify -p or --project')
    if args.target is None:
        error('you must specify -t or --target')
        
    project = Project(args.project)
    target = Target(args.target)
    package(target.environment, target, project)

